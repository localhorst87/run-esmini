name: 'Run esmini'
description: 'An action script that will perform simulations using the 
              open-source scenario simulator esmini'
inputs:
  token:
    description: 'Github token (required to download esmini release). For ease 
                  of use, I recommend to use the automatically created token of
                  your workflow, accessible via the secrets.GITHUB_TOKEN env
                  variable.'
    required: true
  xosc: 
    description: 'Path to the OpenSCENARIO file that shall be simulated
                  Example: "./path/to/scenario.xosc"'
    required: true
  parameter-variation:
    description: 'Optionally a parameter distribution file, according to
                  the OpenSCENARIO standard can be set.
                  Example: "./path/to/parameter_set.xosc"'
    required: false
  release:
    description: 'Optionally, the name of the esmini release can be determined
                  by indicating the according tag.
                  Please note: Make sure to define the "asset" input to make
                  sure the installation will succeed!
                  Example: "v2.33.2"'                  
    required: false
    default: 'v2.36.2'
  asset:
    description: 'If a specific relase is determined, the asset of the relase 
                  to install must be determined as well.
                  Example: "esmini-bin_Linux.zip"'
    required: false
    default: 'esmini-bin_Linux.zip'
  result-dir:
    description: 'Location of where the result data will be stored.
                  Example: "./path/to/results"'
    required: false
    default: './simulation-results'
  timestep:
    description: 'Specify the simulation timestep in seconds.
                  Example: 0.05'
    required: false
runs:
  using: "composite"
  steps:
    - name: Install prerequisites
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y unzip
    - name: Download release
      shell: bash
      run: gh release download ${{ inputs.release }} --repo https://github.com/esmini/esmini --pattern ${{ inputs.asset }}
      env:
        GH_TOKEN: ${{ inputs.token }}
    - name: unzip release
      shell: bash
      run: unzip ${{ inputs.asset }}
    - name: run simulation
      shell: bash
      run: |
        xoscPath=${{ inputs.xosc }}
        xoscPathSplitted=(${xoscPath//// })
        scenarioName=${xoscPathSplitted[-1]: 0: -5}   
        
        outputDirectory=${{ inputs.result-dir }}
        if [[ ${outputDirectory: -1} = / ]]; then outputDirectory=${outputDirectory: 0:-1}; fi
        
        parameterVariationFile=${{ inputs.parameter-variation }}
        timestep=${{ timestep }}

        esminiExec=$(find -wholename "**/bin/esmini")

        esminiCmd="${esminiExec} --headless --osc ${xoscPath} --record $outputDirectory/$scenarioName.dat --osi_file $outputDirectory/$scenarioName.osi --csv_logger $outputDirectory/$scenarioName.csv"
        if [[ -n $parameterVariationFile ]]; then esminiCmd="${esminiCmd} --param_dist ${parameterVariationFile}"; fi
        if [[ -n $timestep ]]; then esminiCmd="${esminiCmd} --fixed_timestep ${timestep} "; fi

        echo "executing: ${esminiCmd}"

        $esminiCmd